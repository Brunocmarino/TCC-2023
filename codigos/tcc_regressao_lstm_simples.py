# -*- coding: utf-8 -*-
"""TCC-Regressao-1-LSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cpIV5Ruwq9LM2j9g_HtlhswWlGwSjHdM
"""

#pip install tensorflow

"""Nesse projeto uso LSTM para descobrir qual é o preço de fechamento do bitcoin. Uso 5 features relativas ao candle de negociação diária e prevejo o preço de fechamento do dia seguinte


"""

# Importar as bibliotecas necessárias
import os
import pandas as pd
import numpy as np
import math
import datetime
import time

# Importar sklearn para avaliar o modelo
from sklearn.metrics import mean_squared_error, mean_absolute_error, explained_variance_score, r2_score
from sklearn.metrics import mean_poisson_deviance, mean_gamma_deviance, accuracy_score
from sklearn.preprocessing  import MinMaxScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import confusion_matrix


# Importar tensorflow para construir o modelo
import tensorflow as tf
import keras
from keras import optimizers
from keras.models import Sequential, Model
from keras.layers import *
from keras.callbacks import ModelCheckpoint, History, EarlyStopping
from keras.losses import MeanSquaredError
from keras.metrics import RootMeanSquaredError
from keras.optimizers import Adam

# Importar bibliotecas para plotar gráficos

import matplotlib.pyplot as plt
from itertools import cycle
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots

"""## Variaveis Globais"""

TIME_STEP = 30              #número de dias usados para prever o futuro
JUMP_STEP = 1
NUM_FEATURES = 5
NUM_PREDICT_FUTURE = 1      #número do dia a serem preditos no futuro (prever o próximo dia? Prever o 7º dia?)
# usando apenas o Close

"""## Importar a Base de Dados"""

ticker = 'BTC-USD'
#1410825600
initial_period = int(time.mktime(datetime.datetime(2014, 9, 16, 0, 0).timetuple()))

#1675814400
final_period = int(time.mktime(datetime.datetime(2023, 2, 8, 0, 0).timetuple()))
# 3067 valores. 2300 é 75%
interval = '1d' # 1d, 1wk, 1m

query_string = f'https://query1.finance.yahoo.com/v7/finance/download/{ticker}?period1={initial_period}&period2={final_period}&interval={interval}&events=history&includeAdjustedClose=true'

data = pd.read_csv(query_string)
df = pd.DataFrame(data, columns=['Date', 'Open', 'High', 'Low', 'Close', 'Volume'])
df.index = pd.to_datetime(df['Date'], format='%Y-%m-%d')

"""Função para escolher os dados utilizados de forma sequencial. A cada t valores

"""

# def selecionaValores(df, jump_step):
#   return df[0::jump_step]

# df = selecionaValores(df, JUMP_STEP)

"""Preparação dos Dados:"""

# Retira a Data e coloca como Index
df.index = df.pop('Date')

data.dropna(inplace=True)
data.reset_index(inplace = True)

# Definir os dataframes dos objetivos a serem alcançados pelo modelo. O Y. Baseados no TimeStep e numero do dia a ser predito

ignoreDays = TIME_STEP + NUM_PREDICT_FUTURE - 1
index = np.array(df.index)[ignoreDays:]

# Dataframe com o valor de fechamento
target_df_Close = pd.DataFrame(df['Close'], index, ['Close']).rename(columns={'Close':'YClose'})

# Dataframe com a variação nominal entre os dias
array_change = np.array(target_df_Close.YClose) - np.array(df['Close'])[TIME_STEP-1 : -NUM_PREDICT_FUTURE]
target_df_Change = pd.DataFrame(array_change, index, columns=['Close']).rename(columns={'Close':'YChange'})

# Dataframe com a variação percentual entre os dias
array_variation = np.array(target_df_Change.YChange) / np.array(df['Close'])[TIME_STEP-1 : -NUM_PREDICT_FUTURE]
target_df_Variation = pd.DataFrame(array_variation*100, index, ['Close']).rename(columns={'Close':'YVariation'})

df.Close.size, target_df_Close.size, target_df_Change.size, target_df_Variation.size

#plt.plot(df.index, df['Close'])

"""## Divisão em Treino, Validação e Teste"""

# Divisão entre 70% treino, 10% validação e 20% teste
size = len(target_df_Close)
train_size = int(size * 0.7)
validation_size = int(size * 0.1)
test_size = size - train_size - validation_size

x_train_data = df[: train_size + TIME_STEP - 1]
x_val_data = df[ train_size : (train_size + validation_size + TIME_STEP - 1)]
x_test_data = df[train_size + validation_size : -NUM_PREDICT_FUTURE]

y_train_data = target_df_Close[: train_size]
y_val_data = target_df_Close[train_size : (train_size + validation_size)]
y_test_data = target_df_Close[(train_size + validation_size) :]

size, train_size, validation_size, test_size

x_train_data.shape, x_val_data.shape, x_test_data.shape, y_train_data.shape, y_val_data.shape, y_test_data.shape

#Transforma os dados para suavizar as variações em escala absoluta
# Transforma input data
scaler_train_input = MinMaxScaler(feature_range=(0, 1))
scaled_train_input = scaler_train_input.fit_transform(x_train_data)

scaled_val_input = scaler_train_input.transform(x_val_data)
scaled_test_input = scaler_train_input.transform(x_test_data)

# Transforma output data para o log do resultado
# scaled_train_output = np.array(y_train_data)
# scaled_val_output = np.array(y_val_data)
# scaled_test_output = np.array(y_test_data)
scaled_train_output = np.log10(np.array(y_train_data))
scaled_val_output = np.log10(np.array(y_val_data))
scaled_test_output = np.log10(np.array(y_test_data))

def createDataset(x, y, time_step=1):
  input = []
  output = []
  for i in range(len(y)):
    row = np.array([e for e in x[i : i + time_step]])
    input.append(row)
    output.append(y[i])
  return np.array(input), np.array(output)

x_train, y_train = createDataset(scaled_train_input, scaled_train_output, TIME_STEP)
x_val, y_val = createDataset(scaled_val_input, scaled_val_output, TIME_STEP)
x_test, y_test = createDataset(scaled_test_input, scaled_test_output, TIME_STEP)

print(df.shape)
print(x_train.shape, y_train.shape)
print(x_val.shape, y_val.shape)
print(x_test.shape, y_test.shape)

train_size, validation_size, test_size

"""## Construção do Modelo LSTM

### Modelo: LSTM
"""

def create_lstm_model():
  #create the sequence model
  model = Sequential()

  model.add(LSTM(units = 16, activation = 'relu', return_sequences=False, input_shape = (x_train.shape[1], x_train.shape[2])))
  # model.add(Dropout(0.2))
  # model.add(LSTM(units = 64, input_shape = (x_train.shape[1], x_train.shape[2])))

  model.add(Dense(units=1))
  model.summary()
  return model

model = create_lstm_model()
model.compile(optimizer = 'adam', loss = 'mean_squared_error', metrics=['mae'])
checkpoint_path = 'tcc_regressao_.hdf5'
checkpoint = ModelCheckpoint(filepath=checkpoint_path,
                             monitor='val_loss',
                             verbose=0,
                             save_best_only=True,
                             mode='min')
earlystopping = EarlyStopping(monitor='val_loss', patience=50, restore_best_weights=True)
callbacks = [checkpoint, earlystopping]

history = model.fit(x_train, y_train, batch_size = 32, epochs = 500, verbose=0, shuffle=False, validation_data=(x_val, y_val), callbacks=callbacks)

"""## Previsões e Métricas

"""

from tensorflow.keras.models import load_model

model_from_saved_checkpoint = load_model(checkpoint_path)

test_predict = model_from_saved_checkpoint.predict(x_test)
val_predict = model_from_saved_checkpoint.predict(x_val)

# Calculate regression metrics
# mse = mean_squared_error(y_test, test_predict)
# rmse = np.sqrt(mse)
# mae = mean_absolute_error(y_test, test_predict)
# r2 = r2_score(y_test, test_predict)
mse = mean_squared_error(y_val, val_predict)
rmse = np.sqrt(mse)
mae = mean_absolute_error(y_val, val_predict)
r2 = r2_score(y_val, val_predict)

# Print the metrics
print(f"Mean Squared Error (MSE): {mse}")
print(f"Root Mean Squared Error (RMSE): {rmse}")
print(f"Mean Absolute Error (MAE): {mae}")
print(f"Coefficient of Determination (R-squared): {r2}")
print()

"""## Gráficos"""

loss = history.history['loss']
val_loss = history.history['val_loss']
epochs = range(len(loss))

plt.plot(epochs, loss, 'r', label='Training loss')
plt.plot(epochs, val_loss, 'b', label='Validation loss')
plt.title('Training and validation loss')
plt.legend(loc=0)
plt.figure()


plt.show()

plt.figure(figsize=(16,7))

plt.plot(test_predict, 'r', marker='.', label='Predicted Test', linewidth=0)

plt.plot(y_test, marker='.', label='Actual Test',linewidth=0)

plt.legend()
plt.show()

"""Plotar o Gráfico"""